#!/usr/sbin/lua

--[[
mktestdoc.lua V0.2

V0.1
init version

V0.2
Use Lua Server Page file as doc template
remove testReport parser,and move it to mktestdb

]]

--usage
local g_usage = [[
Usage: mktestdoc [options] testdb
make test case document or test report from testcase database generated by mktestdb and LuaServerPage template
Options:
    -tc <template>  Specify a Lua Server Page file as template to generate testcase pages of doc.
                     If not specified,will use $MMCP_HOME/bin/template/testcase.lsp
    -ti <template>  Specify a Lua Server Page file as template to generate index pages of doc.
                     If not specified,will use $MMCP_HOME/bin/template/testindex.lsp

Report bugs to <lihui@coship.com>.]]

local s_testdbfile = nil
local s_casetemplate = nil
local s_indextemplate = nil

--function parse arg
local function parsearg()
	local index = 1

	while arg[index] do
		if arg[index] == "-tc" then
			index = index + 1
			if not arg[index] then
				print("mktestdb:argument to '-tc' is missing")
				os.exit()
			else
				s_casetemplate = arg[index]
			end
		elseif arg[index] == "-ti" then
			index = index + 1
			if not arg[index] then
				print("mktestdb:argument to '-ti' is missing")
				os.exit()
			else
				s_indextemplate = arg[index]
			end
		elseif arg[index] == "--help" then
			print(g_usage)
			os.exit()
		elseif string.sub(arg[index],1,1) ~= "-" then
			s_testdbfile = arg[index]
		end

		index = index + 1
	end

	if not s_testdbfile then
		print("no db file")
		os.exit()
	end
end

--function testdb 2 table
local s_tablefromtestdb = nil
local function testdb2table(srctable)
	s_tablefromtestdb = srctable
end

--gen test document by lsp

function generatedocument(testcasees)
	--pairs的顺序无法控制，而我们希望模块在目录里是有序的

	--在这里构造一颗树，描述目录结构(目录树)，然后就可以在下次循环时画层次目录了
	local helpdirtable = {}
	local dirtree = {}
	local moduledir = {}
	for dir in pairs(testcasees) do
		table.insert(helpdirtable,dir)
		assert(not moduledir[dir])
		moduledir[dir] = {}

		--print("dir:"..dir)
		local founddir = false
		local tmptree = dirtree --ref,not copy
		for path in string.gmatch(dir,"(.-)/") do
			founddir = true
			--print(path)
			if not tmptree[path] then
				tmptree[path] = {}
			end
			tmptree = tmptree[path]

			table.insert(moduledir[dir],path)
		end

		local _,_,leaf = string.find(dir,".*/([%w%p]+)$")
		if leaf then
			--print("leaf:"..leaf)
			if not tmptree[leaf] then
				tmptree[leaf] = {}
			end
			tmptree[leaf]["*leaf"] = 1

			table.insert(moduledir[dir],leaf)
		elseif not founddir then--root leaf
			--print("root:"..dir)
			if not tmptree[dir] then
				tmptree[dir] = {}
			end
			tmptree[dir]["*leaf"] = 1

			table.insert(moduledir[dir],dir)
		end
	end

	local lsp = require("LuaServerPage")

	if s_indextemplate then
		--gen index.html
		indexfile = assert(io.open("document/index.html","w")) --should not be local,lsp file need ref it
		lsp.setoutfunc("indexfile:write")

		local env = {}
		env["dirtree"] = dirtree
		setmetatable(env, { __index = _G })

		lsp.include(s_indextemplate,env)

		indexfile:close()
	end

	--gen modules.html
	table.sort(helpdirtable)

	for moduleindex,dir in ipairs(helpdirtable) do
		--print(dir)
		local modulecases = testcasees[dir]
		assert(modulecases)

		--print(dir)
		--print(moduledir[dir][1])
		--print(moduledir[dir][2])
		--print(moduledir[dir][3])

		local _,_,modulename = string.find(dir,".*/([%w%p]+)$")

		--root,may be "." or dir name
		if not modulename then
			if dir == "." then
				modulename = "root"
			else
				modulename = dir
			end
		end
		print("generating "..modulename..".html")

		docfile = assert(io.open("document/"..modulename..".html","w")) --should not be local,lsp file need ref it
		lsp.setoutfunc("docfile:write")

		local env = {}
		env["dirtree"] = dirtree
		env["moduledir"] = moduledir[dir]
		env["testcases"] = modulecases
		setmetatable(env, { __index = _G })
		lsp.include(s_casetemplate,env)

		docfile:close()
	end
end



---------------------
----main function----
---------------------
--init platform check
local mmcphome = os.getenv("MMCP_HOME")
if not mmcphome then
	print("No MMC_HOME env got")
	os.exit()
end

package.path = package.path..";"..mmcphome.."/bin/?.lua"

--check arg
parsearg(arg)

--mkdir
os.execute("mkdir document -p")

--if use default template ,cp files needed
if not s_casetemplate or not s_indextemplate then
	os.execute("cp "..mmcphome.."/bin/template/style.css document/ -rf")
	os.execute("cp "..mmcphome.."/bin/template/bg.gif document/ -rf")
end

--set default template
if not s_casetemplate then s_casetemplate = mmcphome.."/bin/template/testcase.lsp" end
if not s_indextemplate then s_indextemplate = mmcphome.."/bin/template/testindex.lsp" end


--convert testdb 2 table s_tablefromtestdb
testcases = testdb2table
dofile(s_testdbfile)

--generate testcase document or test report
generatedocument(s_tablefromtestdb)


