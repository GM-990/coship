/** @addtogroup CSASSERT

@version CS_ASSERT_0.2
- 增加FAQ
@version CS_ASSERT_0.1
- 增加设置所有模块级别的机制

@details FAQ
-# 一般情况下我该如何使用？
    -# 打印直接使用：CSDEBUG("模块名建议使用宏"，打印级别，"打印字符串"，参数列表)；
    -# 初始化：以CSDebugInit代替原有CSSetDebugLevel即可。
-# 以前我的打印以"#define MYPRINT CSTRACE"的形式进行了转换，现在直接把CSTRACE换成CSDEBUG可以吗？
    -# 我们不建议这样转换，以前之所以这样做原因有二。一是希望按模块控制打印，二是希望发布版关掉打印。前者已经可以用模块名进行控制，后者CSDEBUG已经可以通过_DEBUG宏自动关闭。所以已经完全没有必要如此定义。
-# 第三方库要求我提供一个形如printf的打印函数，我该如何实现？
    -# CSVDebug函数就是专门为此需求而加，使用方法类似于vprintf。
-# 调试时我想只看到某几个模块的打印信息该如何操作？
    -# 以一个较高的级别调用CSDebugSetDefaultLevel进行初始化。
    -# 使用CSDebugSet将你关心的模块的打印级别设置到一个较低的值。
-# 我如何知道"模块名"这个字段？
    -# 看打印，所有的打印都会自动加上模块名
    -# 使用CSDebugGetModuleInfo接口。但请注意该接口仅返回所有已注册的模块名称。所以请尽量完些调用以保证所有的模块已经将自己注册到本系统。
-# 为什么我的打印前会自动加上模块名字段？
    -# 为了方便区分打印来自哪个模块，CSDebug自动将所有已换行符结束的打印语句前加上了模块名的前缀。之所以不在所有的打印前添加是为了防止利用循环多次打印形成一行文本的情况，例如利用循环打印一个很长的字节数组。为此我们建议严格按照编程规范将换行符放在打印的最后而不是开头。
-# 为什么要把V1.0版本的模块句柄改为模块名称字符串？
    -# 你不觉得在你模块中的少则数个，多者上千个.c文件中，每次打印都要先获取一个全局HANDLE很麻烦吗？
    -# 这个handle不方便在应用上获得
-# 是的，使用字符串确实方便的多，但效率怎么样呢？我情愿麻烦一些也不要出现效率问题，我的模块对效率要求很高呢！
    -# 我们在设计时已经充分考虑了字符串搜索的效率问题，根据我们测试的结果，在256个模块，10W条打印的情况下，仅字符串搜索这一项，Win32下不进行任何字符串搜索大约需要857238668个CPU周期（这是一个非常小的单位），仅使用顺序字符串方式搜索大约需要1413926888个CPU周期，使用优化后的字符串搜索算法大约需要963207971个CPU周期，在BCM7403下，这3个数据分别是1756ms、4491ms、2673ms。可见优化后，使用字符串代替句柄方式，对效率的影响并不是特别大，在模块不足256的情况下，优化后的算法将有更大的优势。更重要的是，同样的测试，如果算上最终的打印输出的时间，在WIN32和BCM7403下，这两个时间会分别变为约113424450106个CPU周期和约255515ms，即使不进行任何优化，字符串搜索的时间也只占到了整个打印时间的1%左右，几乎不用考虑由此带来的效率问题。

@{
*/

#ifndef _CS_ASSERT_H_
#define _CS_ASSERT_H_

#include "udi_assert.h"

#ifdef	__cplusplus
extern "C" {
#endif


#ifdef	__cplusplus
}
#endif

/** @} */

#endif 


